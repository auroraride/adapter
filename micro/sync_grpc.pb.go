// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: sync.proto

package micro

import (
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SyncProviderClient is the client API for SyncProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyncProviderClient interface {
}

type syncProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncProviderClient(cc grpc.ClientConnInterface) SyncProviderClient {
	return &syncProviderClient{cc}
}

// SyncProviderServer is the server API for SyncProvider service.
// All implementations must embed UnimplementedSyncProviderServer
// for forward compatibility
type SyncProviderServer interface {
	mustEmbedUnimplementedSyncProviderServer()
}

// UnimplementedSyncProviderServer must be embedded to have forward compatible implementations.
type UnimplementedSyncProviderServer struct {
}

func (UnimplementedSyncProviderServer) mustEmbedUnimplementedSyncProviderServer() {}

// UnsafeSyncProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncProviderServer will
// result in compilation errors.
type UnsafeSyncProviderServer interface {
	mustEmbedUnimplementedSyncProviderServer()
}

func RegisterSyncProviderServer(s grpc.ServiceRegistrar, srv SyncProviderServer) {
	s.RegisterService(&SyncProvider_ServiceDesc, srv)
}

// SyncProvider_ServiceDesc is the grpc.ServiceDesc for SyncProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SyncProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "micro.SyncProvider",
	HandlerType: (*SyncProviderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "sync.proto",
}
