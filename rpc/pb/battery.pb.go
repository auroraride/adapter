// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.2
// source: battery.proto

package pb

import (
	timestamppb "github.com/auroraride/adapter/rpc/pb/timestamppb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatteryFaultType int32

const (
	BatteryFaultType_BatteryFaultVoltageLow                 BatteryFaultType = 0  // 总压低
	BatteryFaultType_BatteryFaultVoltageHigh                BatteryFaultType = 1  // 总压高
	BatteryFaultType_BatteryFaultMonVoltageLow              BatteryFaultType = 2  // 单体低
	BatteryFaultType_BatteryFaultMonVoltageHigh             BatteryFaultType = 3  // 单体高
	BatteryFaultType_BatteryFaultDischargeOvercurrent       BatteryFaultType = 6  // 放电过流
	BatteryFaultType_BatteryFaultChargeOvercurrent          BatteryFaultType = 7  // 充电过流
	BatteryFaultType_BatteryFaultSocLow                     BatteryFaultType = 8  // SOC低
	BatteryFaultType_BatteryFaultChargingTemperatureHigh    BatteryFaultType = 11 // 充电高温
	BatteryFaultType_BatteryFaultChargingTemperatureLow     BatteryFaultType = 12 // 充电低温
	BatteryFaultType_BatteryFaultDisChargingTemperatureHigh BatteryFaultType = 13 // 放电高温
	BatteryFaultType_BatteryFaultDisChargingTemperatureLow  BatteryFaultType = 14 // 放电低温
	BatteryFaultType_BatteryFaultShortCircuit               BatteryFaultType = 15 // 短路
	BatteryFaultType_BatteryFaultMosTemperatureHigh         BatteryFaultType = 16 // MOS高温
)

// Enum value maps for BatteryFaultType.
var (
	BatteryFaultType_name = map[int32]string{
		0:  "BatteryFaultVoltageLow",
		1:  "BatteryFaultVoltageHigh",
		2:  "BatteryFaultMonVoltageLow",
		3:  "BatteryFaultMonVoltageHigh",
		6:  "BatteryFaultDischargeOvercurrent",
		7:  "BatteryFaultChargeOvercurrent",
		8:  "BatteryFaultSocLow",
		11: "BatteryFaultChargingTemperatureHigh",
		12: "BatteryFaultChargingTemperatureLow",
		13: "BatteryFaultDisChargingTemperatureHigh",
		14: "BatteryFaultDisChargingTemperatureLow",
		15: "BatteryFaultShortCircuit",
		16: "BatteryFaultMosTemperatureHigh",
	}
	BatteryFaultType_value = map[string]int32{
		"BatteryFaultVoltageLow":                 0,
		"BatteryFaultVoltageHigh":                1,
		"BatteryFaultMonVoltageLow":              2,
		"BatteryFaultMonVoltageHigh":             3,
		"BatteryFaultDischargeOvercurrent":       6,
		"BatteryFaultChargeOvercurrent":          7,
		"BatteryFaultSocLow":                     8,
		"BatteryFaultChargingTemperatureHigh":    11,
		"BatteryFaultChargingTemperatureLow":     12,
		"BatteryFaultDisChargingTemperatureHigh": 13,
		"BatteryFaultDisChargingTemperatureLow":  14,
		"BatteryFaultShortCircuit":               15,
		"BatteryFaultMosTemperatureHigh":         16,
	}
)

func (x BatteryFaultType) Enum() *BatteryFaultType {
	p := new(BatteryFaultType)
	*p = x
	return p
}

func (x BatteryFaultType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatteryFaultType) Descriptor() protoreflect.EnumDescriptor {
	return file_battery_proto_enumTypes[0].Descriptor()
}

func (BatteryFaultType) Type() protoreflect.EnumType {
	return &file_battery_proto_enumTypes[0]
}

func (x BatteryFaultType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatteryFaultType.Descriptor instead.
func (BatteryFaultType) EnumDescriptor() ([]byte, []int) {
	return file_battery_proto_rawDescGZIP(), []int{0}
}

type BatteryListRequest_OrderBy int32

const (
	BatteryListRequest_cycles     BatteryListRequest_OrderBy = 0
	BatteryListRequest_soc        BatteryListRequest_OrderBy = 1
	BatteryListRequest_voltage    BatteryListRequest_OrderBy = 2
	BatteryListRequest_created_at BatteryListRequest_OrderBy = 3
)

// Enum value maps for BatteryListRequest_OrderBy.
var (
	BatteryListRequest_OrderBy_name = map[int32]string{
		0: "cycles",
		1: "soc",
		2: "voltage",
		3: "created_at",
	}
	BatteryListRequest_OrderBy_value = map[string]int32{
		"cycles":     0,
		"soc":        1,
		"voltage":    2,
		"created_at": 3,
	}
)

func (x BatteryListRequest_OrderBy) Enum() *BatteryListRequest_OrderBy {
	p := new(BatteryListRequest_OrderBy)
	*p = x
	return p
}

func (x BatteryListRequest_OrderBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatteryListRequest_OrderBy) Descriptor() protoreflect.EnumDescriptor {
	return file_battery_proto_enumTypes[1].Descriptor()
}

func (BatteryListRequest_OrderBy) Type() protoreflect.EnumType {
	return &file_battery_proto_enumTypes[1]
}

func (x BatteryListRequest_OrderBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatteryListRequest_OrderBy.Descriptor instead.
func (BatteryListRequest_OrderBy) EnumDescriptor() ([]byte, []int) {
	return file_battery_proto_rawDescGZIP(), []int{17, 0}
}

type BatteryListRequest_OrderType int32

const (
	BatteryListRequest_asc  BatteryListRequest_OrderType = 0
	BatteryListRequest_desc BatteryListRequest_OrderType = 1
)

// Enum value maps for BatteryListRequest_OrderType.
var (
	BatteryListRequest_OrderType_name = map[int32]string{
		0: "asc",
		1: "desc",
	}
	BatteryListRequest_OrderType_value = map[string]int32{
		"asc":  0,
		"desc": 1,
	}
)

func (x BatteryListRequest_OrderType) Enum() *BatteryListRequest_OrderType {
	p := new(BatteryListRequest_OrderType)
	*p = x
	return p
}

func (x BatteryListRequest_OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatteryListRequest_OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_battery_proto_enumTypes[2].Descriptor()
}

func (BatteryListRequest_OrderType) Type() protoreflect.EnumType {
	return &file_battery_proto_enumTypes[2]
}

func (x BatteryListRequest_OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatteryListRequest_OrderType.Descriptor instead.
func (BatteryListRequest_OrderType) EnumDescriptor() ([]byte, []int) {
	return file_battery_proto_rawDescGZIP(), []int{17, 1}
}

type BatteryCycles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Minimum int64 `protobuf:"varint,1,opt,name=minimum,proto3" json:"minimum,omitempty"` // 最小值
	Maximum int64 `protobuf:"varint,2,opt,name=maximum,proto3" json:"maximum,omitempty"` // 最大值
}

func (x *BatteryCycles) Reset() {
	*x = BatteryCycles{}
	mi := &file_battery_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatteryCycles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryCycles) ProtoMessage() {}

func (x *BatteryCycles) ProtoReflect() protoreflect.Message {
	mi := &file_battery_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryCycles.ProtoReflect.Descriptor instead.
func (*BatteryCycles) Descriptor() ([]byte, []int) {
	return file_battery_proto_rawDescGZIP(), []int{0}
}

func (x *BatteryCycles) GetMinimum() int64 {
	if x != nil {
		return x.Minimum
	}
	return 0
}

func (x *BatteryCycles) GetMaximum() int64 {
	if x != nil {
		return x.Maximum
	}
	return 0
}

type BatteryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Sn             string                  `protobuf:"bytes,2,opt,name=sn,proto3" json:"sn,omitempty"`
	SoftVersion    *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=soft_version,json=softVersion,proto3" json:"soft_version,omitempty"`
	HardVersion    *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=hard_version,json=hardVersion,proto3" json:"hard_version,omitempty"`
	Soft_4GVersion *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=soft_4g_version,json=soft4gVersion,proto3" json:"soft_4g_version,omitempty"`
	Hard_4GVersion *wrapperspb.UInt32Value `protobuf:"bytes,6,opt,name=hard_4g_version,json=hard4gVersion,proto3" json:"hard_4g_version,omitempty"`
	Sn_4G          *wrapperspb.UInt64Value `protobuf:"bytes,7,opt,name=sn_4g,json=sn4g,proto3" json:"sn_4g,omitempty"`
	Iccid          *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=iccid,proto3" json:"iccid,omitempty"`
	Soc            *wrapperspb.UInt32Value `protobuf:"bytes,9,opt,name=soc,proto3" json:"soc,omitempty"`
	Imei           *string                 `protobuf:"bytes,10,opt,name=imei,proto3,oneof" json:"imei,omitempty"`
	Heartbeats     []*BatteryHeartbeat     `protobuf:"bytes,11,rep,name=heartbeats,proto3" json:"heartbeats,omitempty"`
}

func (x *BatteryItem) Reset() {
	*x = BatteryItem{}
	mi := &file_battery_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatteryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryItem) ProtoMessage() {}

func (x *BatteryItem) ProtoReflect() protoreflect.Message {
	mi := &file_battery_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryItem.ProtoReflect.Descriptor instead.
func (*BatteryItem) Descriptor() ([]byte, []int) {
	return file_battery_proto_rawDescGZIP(), []int{1}
}

func (x *BatteryItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BatteryItem) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *BatteryItem) GetSoftVersion() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SoftVersion
	}
	return nil
}

func (x *BatteryItem) GetHardVersion() *wrapperspb.UInt32Value {
	if x != nil {
		return x.HardVersion
	}
	return nil
}

func (x *BatteryItem) GetSoft_4GVersion() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Soft_4GVersion
	}
	return nil
}

func (x *BatteryItem) GetHard_4GVersion() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Hard_4GVersion
	}
	return nil
}

func (x *BatteryItem) GetSn_4G() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Sn_4G
	}
	return nil
}

func (x *BatteryItem) GetIccid() *wrapperspb.StringValue {
	if x != nil {
		return x.Iccid
	}
	return nil
}

func (x *BatteryItem) GetSoc() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Soc
	}
	return nil
}

func (x *BatteryItem) GetImei() string {
	if x != nil && x.Imei != nil {
		return *x.Imei
	}
	return ""
}

func (x *BatteryItem) GetHeartbeats() []*BatteryHeartbeat {
	if x != nil {
		return x.Heartbeats
	}
	return nil
}

type BatteryHeartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Sn                   string                 `protobuf:"bytes,2,opt,name=sn,proto3" json:"sn,omitempty"`
	BatteryId            int64                  `protobuf:"varint,3,opt,name=battery_id,json=batteryId,proto3" json:"battery_id,omitempty"`
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Voltage              float64                `protobuf:"fixed64,5,opt,name=voltage,proto3" json:"voltage,omitempty"`
	Current              float64                `protobuf:"fixed64,6,opt,name=current,proto3" json:"current,omitempty"`
	Soc                  uint32                 `protobuf:"varint,7,opt,name=soc,proto3" json:"soc,omitempty"`
	Soh                  uint32                 `protobuf:"varint,8,opt,name=soh,proto3" json:"soh,omitempty"`
	InCabinet            bool                   `protobuf:"varint,9,opt,name=in_cabinet,json=inCabinet,proto3" json:"in_cabinet,omitempty"`
	Capacity             float64                `protobuf:"fixed64,10,opt,name=capacity,proto3" json:"capacity,omitempty"`
	MonMaxVoltage        uint32                 `protobuf:"varint,11,opt,name=mon_max_voltage,json=monMaxVoltage,proto3" json:"mon_max_voltage,omitempty"`
	MonMaxVoltagePos     uint32                 `protobuf:"varint,12,opt,name=mon_max_voltage_pos,json=monMaxVoltagePos,proto3" json:"mon_max_voltage_pos,omitempty"`
	MonMinVoltage        uint32                 `protobuf:"varint,13,opt,name=mon_min_voltage,json=monMinVoltage,proto3" json:"mon_min_voltage,omitempty"`
	MonMinVoltagePos     uint32                 `protobuf:"varint,14,opt,name=mon_min_voltage_pos,json=monMinVoltagePos,proto3" json:"mon_min_voltage_pos,omitempty"`
	MaxTemp              uint32                 `protobuf:"varint,15,opt,name=max_temp,json=maxTemp,proto3" json:"max_temp,omitempty"`
	MinTemp              uint32                 `protobuf:"varint,16,opt,name=min_temp,json=minTemp,proto3" json:"min_temp,omitempty"`
	Faults               []byte                 `protobuf:"bytes,17,opt,name=faults,proto3" json:"faults,omitempty"`
	MosStatus            []byte                 `protobuf:"bytes,18,opt,name=mos_status,json=mosStatus,proto3" json:"mos_status,omitempty"`
	MonVoltage           []byte                 `protobuf:"bytes,19,opt,name=mon_voltage,json=monVoltage,proto3" json:"mon_voltage,omitempty"`
	Temp                 []byte                 `protobuf:"bytes,20,opt,name=temp,proto3" json:"temp,omitempty"`
	MosTemp              uint32                 `protobuf:"varint,21,opt,name=mos_temp,json=mosTemp,proto3" json:"mos_temp,omitempty"`
	EnvTemp              uint32                 `protobuf:"varint,22,opt,name=env_temp,json=envTemp,proto3" json:"env_temp,omitempty"`
	Geom                 []byte                 `protobuf:"bytes,23,opt,name=geom,proto3" json:"geom,omitempty"`
	Gps                  uint32                 `protobuf:"varint,24,opt,name=gps,proto3" json:"gps,omitempty"`
	Strength             uint32                 `protobuf:"varint,25,opt,name=strength,proto3" json:"strength,omitempty"`
	Cycles               uint32                 `protobuf:"varint,26,opt,name=cycles,proto3" json:"cycles,omitempty"`
	ChargingTime         uint64                 `protobuf:"varint,27,opt,name=charging_time,json=chargingTime,proto3" json:"charging_time,omitempty"`
	DisChargingTime      uint64                 `protobuf:"varint,28,opt,name=dis_charging_time,json=disChargingTime,proto3" json:"dis_charging_time,omitempty"`
	UsingTime            uint64                 `protobuf:"varint,29,opt,name=using_time,json=usingTime,proto3" json:"using_time,omitempty"`
	TotalChargingTime    uint64                 `protobuf:"varint,30,opt,name=total_charging_time,json=totalChargingTime,proto3" json:"total_charging_time,omitempty"`
	TotalDisChargingTime uint64                 `protobuf:"varint,31,opt,name=total_dis_charging_time,json=totalDisChargingTime,proto3" json:"total_dis_charging_time,omitempty"`
	TotalUsingTime       uint64                 `protobuf:"varint,32,opt,name=total_using_time,json=totalUsingTime,proto3" json:"total_using_time,omitempty"`
	Battery              *BatteryItem           `protobuf:"bytes,33,opt,name=battery,proto3" json:"battery,omitempty"`
}

func (x *BatteryHeartbeat) Reset() {
	*x = BatteryHeartbeat{}
	mi := &file_battery_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatteryHeartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryHeartbeat) ProtoMessage() {}

func (x *BatteryHeartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_battery_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryHeartbeat.ProtoReflect.Descriptor instead.
func (*BatteryHeartbeat) Descriptor() ([]byte, []int) {
	return file_battery_proto_rawDescGZIP(), []int{2}
}

func (x *BatteryHeartbeat) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BatteryHeartbeat) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *BatteryHeartbeat) GetBatteryId() int64 {
	if x != nil {
		return x.BatteryId
	}
	return 0
}

func (x *BatteryHeartbeat) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *BatteryHeartbeat) GetVoltage() float64 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *BatteryHeartbeat) GetCurrent() float64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *BatteryHeartbeat) GetSoc() uint32 {
	if x != nil {
		return x.Soc
	}
	return 0
}

func (x *BatteryHeartbeat) GetSoh() uint32 {
	if x != nil {
		return x.Soh
	}
	return 0
}

func (x *BatteryHeartbeat) GetInCabinet() bool {
	if x != nil {
		return x.InCabinet
	}
	return false
}

func (x *BatteryHeartbeat) GetCapacity() float64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *BatteryHeartbeat) GetMonMaxVoltage() uint32 {
	if x != nil {
		return x.MonMaxVoltage
	}
	return 0
}

func (x *BatteryHeartbeat) GetMonMaxVoltagePos() uint32 {
	if x != nil {
		return x.MonMaxVoltagePos
	}
	return 0
}

func (x *BatteryHeartbeat) GetMonMinVoltage() uint32 {
	if x != nil {
		return x.MonMinVoltage
	}
	return 0
}

func (x *BatteryHeartbeat) GetMonMinVoltagePos() uint32 {
	if x != nil {
		return x.MonMinVoltagePos
	}
	return 0
}

func (x *BatteryHeartbeat) GetMaxTemp() uint32 {
	if x != nil {
		return x.MaxTemp
	}
	return 0
}

func (x *BatteryHeartbeat) GetMinTemp() uint32 {
	if x != nil {
		return x.MinTemp
	}
	return 0
}

func (x *BatteryHeartbeat) GetFaults() []byte {
	if x != nil {
		return x.Faults
	}
	return nil
}

func (x *BatteryHeartbeat) GetMosStatus() []byte {
	if x != nil {
		return x.MosStatus
	}
	return nil
}

func (x *BatteryHeartbeat) GetMonVoltage() []byte {
	if x != nil {
		return x.MonVoltage
	}
	return nil
}

func (x *BatteryHeartbeat) GetTemp() []byte {
	if x != nil {
		return x.Temp
	}
	return nil
}

func (x *BatteryHeartbeat) GetMosTemp() uint32 {
	if x != nil {
		return x.MosTemp
	}
	return 0
}

func (x *BatteryHeartbeat) GetEnvTemp() uint32 {
	if x != nil {
		return x.EnvTemp
	}
	return 0
}

func (x *BatteryHeartbeat) GetGeom() []byte {
	if x != nil {
		return x.Geom
	}
	return nil
}

func (x *BatteryHeartbeat) GetGps() uint32 {
	if x != nil {
		return x.Gps
	}
	return 0
}

func (x *BatteryHeartbeat) GetStrength() uint32 {
	if x != nil {
		return x.Strength
	}
	return 0
}

func (x *BatteryHeartbeat) GetCycles() uint32 {
	if x != nil {
		return x.Cycles
	}
	return 0
}

func (x *BatteryHeartbeat) GetChargingTime() uint64 {
	if x != nil {
		return x.ChargingTime
	}
	return 0
}

func (x *BatteryHeartbeat) GetDisChargingTime() uint64 {
	if x != nil {
		return x.DisChargingTime
	}
	return 0
}

func (x *BatteryHeartbeat) GetUsingTime() uint64 {
	if x != nil {
		return x.UsingTime
	}
	return 0
}

func (x *BatteryHeartbeat) GetTotalChargingTime() uint64 {
	if x != nil {
		return x.TotalChargingTime
	}
	return 0
}

func (x *BatteryHeartbeat) GetTotalDisChargingTime() uint64 {
	if x != nil {
		return x.TotalDisChargingTime
	}
	return 0
}

func (x *BatteryHeartbeat) GetTotalUsingTime() uint64 {
	if x != nil {
		return x.TotalUsingTime
	}
	return 0
}

func (x *BatteryHeartbeat) GetBattery() *BatteryItem {
	if x != nil {
		return x.Battery
	}
	return nil
}

type BatterySnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn string `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
}

func (x *BatterySnRequest) Reset() {
	*x = BatterySnRequest{}
	mi := &file_battery_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatterySnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatterySnRequest) ProtoMessage() {}

func (x *BatterySnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_battery_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatterySnRequest.ProtoReflect.Descriptor instead.
func (*BatterySnRequest) Descriptor() ([]byte, []int) {
	return file_battery_proto_rawDescGZIP(), []int{3}
}

func (x *BatterySnRequest) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

type BatteryBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn     []string       `protobuf:"bytes,1,rep,name=sn,proto3" json:"sn,omitempty"`               // 电池编号筛选
	Cycles *BatteryCycles `protobuf:"bytes,2,opt,name=cycles,proto3,oneof" json:"cycles,omitempty"` // 电池循环次数筛选
}

func (x *BatteryBatchRequest) Reset() {
	*x = BatteryBatchRequest{}
	mi := &file_battery_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatteryBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryBatchRequest) ProtoMessage() {}

func (x *BatteryBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_battery_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryBatchRequest.ProtoReflect.Descriptor instead.
func (*BatteryBatchRequest) Descriptor() ([]byte, []int) {
	return file_battery_proto_rawDescGZIP(), []int{4}
}

func (x *BatteryBatchRequest) GetSn() []string {
	if x != nil {
		return x.Sn
	}
	return nil
}

func (x *BatteryBatchRequest) GetCycles() *BatteryCycles {
	if x != nil {
		return x.Cycles
	}
	return nil
}

type BatteryBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items map[string]*BatteryItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BatteryBatchResponse) Reset() {
	*x = BatteryBatchResponse{}
	mi := &file_battery_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatteryBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryBatchResponse) ProtoMessage() {}

func (x *BatteryBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_battery_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryBatchResponse.ProtoReflect.Descriptor instead.
func (*BatteryBatchResponse) Descriptor() ([]byte, []int) {
	return file_battery_proto_rawDescGZIP(), []int{5}
}

func (x *BatteryBatchResponse) GetItems() map[string]*BatteryItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type BatterySampleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voltage float64 `protobuf:"fixed64,1,opt,name=voltage,proto3" json:"voltage,omitempty"`
	Current float64 `protobuf:"fixed64,2,opt,name=current,proto3" json:"current,omitempty"`
	Soc     uint32  `protobuf:"varint,3,opt,name=soc,proto3" json:"soc,omitempty"`
	Geom    []byte  `protobuf:"bytes,4,opt,name=geom,proto3" json:"geom,omitempty"`
}

func (x *BatterySampleResponse) Reset() {
	*x = BatterySampleResponse{}
	mi := &file_battery_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatterySampleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatterySampleResponse) ProtoMessage() {}

func (x *BatterySampleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_battery_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatterySampleResponse.ProtoReflect.Descriptor instead.
func (*BatterySampleResponse) Descriptor() ([]byte, []int) {
	return file_battery_proto_rawDescGZIP(), []int{6}
}

func (x *BatterySampleResponse) GetVoltage() float64 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *BatterySampleResponse) GetCurrent() float64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *BatterySampleResponse) GetSoc() uint32 {
	if x != nil {
		return x.Soc
	}
	return 0
}

func (x *BatterySampleResponse) GetGeom() []byte {
	if x != nil {
		return x.Geom
	}
	return nil
}

type BatteryFaultOverview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fault BatteryFaultType `protobuf:"varint,1,opt,name=fault,proto3,enum=pb.BatteryFaultType" json:"fault,omitempty"`
	Times int64            `protobuf:"varint,2,opt,name=times,proto3" json:"times,omitempty"`
}

func (x *BatteryFaultOverview) Reset() {
	*x = BatteryFaultOverview{}
	mi := &file_battery_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatteryFaultOverview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryFaultOverview) ProtoMessage() {}

func (x *BatteryFaultOverview) ProtoReflect() protoreflect.Message {
	mi := &file_battery_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryFaultOverview.ProtoReflect.Descriptor instead.
func (*BatteryFaultOverview) Descriptor() ([]byte, []int) {
	return file_battery_proto_rawDescGZIP(), []int{7}
}

func (x *BatteryFaultOverview) GetFault() BatteryFaultType {
	if x != nil {
		return x.Fault
	}
	return BatteryFaultType_BatteryFaultVoltageLow
}

func (x *BatteryFaultOverview) GetTimes() int64 {
	if x != nil {
		return x.Times
	}
	return 0
}

type BatteryFaultOverviewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*BatteryFaultOverview `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *BatteryFaultOverviewResponse) Reset() {
	*x = BatteryFaultOverviewResponse{}
	mi := &file_battery_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatteryFaultOverviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryFaultOverviewResponse) ProtoMessage() {}

func (x *BatteryFaultOverviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_battery_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryFaultOverviewResponse.ProtoReflect.Descriptor instead.
func (*BatteryFaultOverviewResponse) Descriptor() ([]byte, []int) {
	return file_battery_proto_rawDescGZIP(), []int{8}
}

func (x *BatteryFaultOverviewResponse) GetItems() []*BatteryFaultOverview {
	if x != nil {
		return x.Items
	}
	return nil
}

type BatteryFaultListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *PaginationRequest     `protobuf:"bytes,1,opt,name=pagination,proto3,oneof" json:"pagination,omitempty"`
	Sn         *string                `protobuf:"bytes,2,opt,name=sn,proto3,oneof" json:"sn,omitempty"`
	BeginAt    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=begin_at,json=beginAt,proto3,oneof" json:"begin_at,omitempty"`
	EndAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_at,json=endAt,proto3,oneof" json:"end_at,omitempty"`
	Fault      *BatteryFaultType      `protobuf:"varint,5,opt,name=fault,proto3,enum=pb.BatteryFaultType,oneof" json:"fault,omitempty"`
	Sns        []string               `protobuf:"bytes,6,rep,name=sns,proto3" json:"sns,omitempty"`
	Start      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=start,proto3,oneof" json:"start,omitempty"`
	Stop       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=stop,proto3,oneof" json:"stop,omitempty"`
}

func (x *BatteryFaultListRequest) Reset() {
	*x = BatteryFaultListRequest{}
	mi := &file_battery_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatteryFaultListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryFaultListRequest) ProtoMessage() {}

func (x *BatteryFaultListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_battery_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryFaultListRequest.ProtoReflect.Descriptor instead.
func (*BatteryFaultListRequest) Descriptor() ([]byte, []int) {
	return file_battery_proto_rawDescGZIP(), []int{9}
}

func (x *BatteryFaultListRequest) GetPagination() *PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *BatteryFaultListRequest) GetSn() string {
	if x != nil && x.Sn != nil {
		return *x.Sn
	}
	return ""
}

func (x *BatteryFaultListRequest) GetBeginAt() *timestamppb.Timestamp {
	if x != nil {
		return x.BeginAt
	}
	return nil
}

func (x *BatteryFaultListRequest) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *BatteryFaultListRequest) GetFault() BatteryFaultType {
	if x != nil && x.Fault != nil {
		return *x.Fault
	}
	return BatteryFaultType_BatteryFaultVoltageLow
}

func (x *BatteryFaultListRequest) GetSns() []string {
	if x != nil {
		return x.Sns
	}
	return nil
}

func (x *BatteryFaultListRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *BatteryFaultListRequest) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

type BatteryFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn      string                 `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
	Fault   BatteryFaultType       `protobuf:"varint,2,opt,name=fault,proto3,enum=pb.BatteryFaultType" json:"fault,omitempty"`
	BeginAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=begin_at,json=beginAt,proto3" json:"begin_at,omitempty"`
	EndAt   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
}

func (x *BatteryFault) Reset() {
	*x = BatteryFault{}
	mi := &file_battery_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatteryFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryFault) ProtoMessage() {}

func (x *BatteryFault) ProtoReflect() protoreflect.Message {
	mi := &file_battery_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryFault.ProtoReflect.Descriptor instead.
func (*BatteryFault) Descriptor() ([]byte, []int) {
	return file_battery_proto_rawDescGZIP(), []int{10}
}

func (x *BatteryFault) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *BatteryFault) GetFault() BatteryFaultType {
	if x != nil {
		return x.Fault
	}
	return BatteryFaultType_BatteryFaultVoltageLow
}

func (x *BatteryFault) GetBeginAt() *timestamppb.Timestamp {
	if x != nil {
		return x.BeginAt
	}
	return nil
}

func (x *BatteryFault) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

type BatteryFaultListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *PaginationResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Items      []*BatteryFault     `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *BatteryFaultListResponse) Reset() {
	*x = BatteryFaultListResponse{}
	mi := &file_battery_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatteryFaultListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryFaultListResponse) ProtoMessage() {}

func (x *BatteryFaultListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_battery_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryFaultListResponse.ProtoReflect.Descriptor instead.
func (*BatteryFaultListResponse) Descriptor() ([]byte, []int) {
	return file_battery_proto_rawDescGZIP(), []int{11}
}

func (x *BatteryFaultListResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *BatteryFaultListResponse) GetItems() []*BatteryFault {
	if x != nil {
		return x.Items
	}
	return nil
}

type BatteryStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateHour    []string  `protobuf:"bytes,1,rep,name=date_hour,json=dateHour,proto3" json:"date_hour,omitempty"`
	Voltage     []float64 `protobuf:"fixed64,2,rep,packed,name=voltage,proto3" json:"voltage,omitempty"`
	BatTemp     []float64 `protobuf:"fixed64,3,rep,packed,name=bat_temp,json=batTemp,proto3" json:"bat_temp,omitempty"`
	MosTemp     []float64 `protobuf:"fixed64,4,rep,packed,name=mos_temp,json=mosTemp,proto3" json:"mos_temp,omitempty"`
	EnvTemp     []float64 `protobuf:"fixed64,5,rep,packed,name=env_temp,json=envTemp,proto3" json:"env_temp,omitempty"`
	Soc         []float64 `protobuf:"fixed64,6,rep,packed,name=soc,proto3" json:"soc,omitempty"`
	Strength    []float64 `protobuf:"fixed64,7,rep,packed,name=strength,proto3" json:"strength,omitempty"`
	Charging    []float64 `protobuf:"fixed64,8,rep,packed,name=charging,proto3" json:"charging,omitempty"`
	DisCharging []float64 `protobuf:"fixed64,9,rep,packed,name=dis_charging,json=disCharging,proto3" json:"dis_charging,omitempty"`
}

func (x *BatteryStatisticsResponse) Reset() {
	*x = BatteryStatisticsResponse{}
	mi := &file_battery_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatteryStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryStatisticsResponse) ProtoMessage() {}

func (x *BatteryStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_battery_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryStatisticsResponse.ProtoReflect.Descriptor instead.
func (*BatteryStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_battery_proto_rawDescGZIP(), []int{12}
}

func (x *BatteryStatisticsResponse) GetDateHour() []string {
	if x != nil {
		return x.DateHour
	}
	return nil
}

func (x *BatteryStatisticsResponse) GetVoltage() []float64 {
	if x != nil {
		return x.Voltage
	}
	return nil
}

func (x *BatteryStatisticsResponse) GetBatTemp() []float64 {
	if x != nil {
		return x.BatTemp
	}
	return nil
}

func (x *BatteryStatisticsResponse) GetMosTemp() []float64 {
	if x != nil {
		return x.MosTemp
	}
	return nil
}

func (x *BatteryStatisticsResponse) GetEnvTemp() []float64 {
	if x != nil {
		return x.EnvTemp
	}
	return nil
}

func (x *BatteryStatisticsResponse) GetSoc() []float64 {
	if x != nil {
		return x.Soc
	}
	return nil
}

func (x *BatteryStatisticsResponse) GetStrength() []float64 {
	if x != nil {
		return x.Strength
	}
	return nil
}

func (x *BatteryStatisticsResponse) GetCharging() []float64 {
	if x != nil {
		return x.Charging
	}
	return nil
}

func (x *BatteryStatisticsResponse) GetDisCharging() []float64 {
	if x != nil {
		return x.DisCharging
	}
	return nil
}

type BatteryPositionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn                 string                 `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
	Start              *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	End                *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
	StationaryDuration int64                  `protobuf:"varint,4,opt,name=stationary_duration,json=stationaryDuration,proto3" json:"stationary_duration,omitempty"`
}

func (x *BatteryPositionRequest) Reset() {
	*x = BatteryPositionRequest{}
	mi := &file_battery_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatteryPositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryPositionRequest) ProtoMessage() {}

func (x *BatteryPositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_battery_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryPositionRequest.ProtoReflect.Descriptor instead.
func (*BatteryPositionRequest) Descriptor() ([]byte, []int) {
	return file_battery_proto_rawDescGZIP(), []int{13}
}

func (x *BatteryPositionRequest) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *BatteryPositionRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *BatteryPositionRequest) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *BatteryPositionRequest) GetStationaryDuration() int64 {
	if x != nil {
		return x.StationaryDuration
	}
	return 0
}

type BatteryPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InCabinet  bool                   `protobuf:"varint,1,opt,name=in_cabinet,json=inCabinet,proto3" json:"in_cabinet,omitempty"`
	Stationary bool                   `protobuf:"varint,2,opt,name=stationary,proto3" json:"stationary,omitempty"`
	Soc        uint32                 `protobuf:"varint,3,opt,name=soc,proto3" json:"soc,omitempty"`
	Lng        float64                `protobuf:"fixed64,4,opt,name=lng,proto3" json:"lng,omitempty"`
	Lat        float64                `protobuf:"fixed64,5,opt,name=lat,proto3" json:"lat,omitempty"`
	Voltage    float64                `protobuf:"fixed64,6,opt,name=voltage,proto3" json:"voltage,omitempty"`
	Gsm        uint32                 `protobuf:"varint,7,opt,name=gsm,proto3" json:"gsm,omitempty"`
	At         *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=at,proto3" json:"at,omitempty"`
}

func (x *BatteryPosition) Reset() {
	*x = BatteryPosition{}
	mi := &file_battery_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatteryPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryPosition) ProtoMessage() {}

func (x *BatteryPosition) ProtoReflect() protoreflect.Message {
	mi := &file_battery_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryPosition.ProtoReflect.Descriptor instead.
func (*BatteryPosition) Descriptor() ([]byte, []int) {
	return file_battery_proto_rawDescGZIP(), []int{14}
}

func (x *BatteryPosition) GetInCabinet() bool {
	if x != nil {
		return x.InCabinet
	}
	return false
}

func (x *BatteryPosition) GetStationary() bool {
	if x != nil {
		return x.Stationary
	}
	return false
}

func (x *BatteryPosition) GetSoc() uint32 {
	if x != nil {
		return x.Soc
	}
	return 0
}

func (x *BatteryPosition) GetLng() float64 {
	if x != nil {
		return x.Lng
	}
	return 0
}

func (x *BatteryPosition) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *BatteryPosition) GetVoltage() float64 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *BatteryPosition) GetGsm() uint32 {
	if x != nil {
		return x.Gsm
	}
	return 0
}

func (x *BatteryPosition) GetAt() *timestamppb.Timestamp {
	if x != nil {
		return x.At
	}
	return nil
}

type BatteryStationary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration  int64                  `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
	StartAt   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_at,json=endAt,proto3,oneof" json:"end_at,omitempty"`
	StartSoc  uint32                 `protobuf:"varint,4,opt,name=start_soc,json=startSoc,proto3" json:"start_soc,omitempty"`
	EndSoc    *uint32                `protobuf:"varint,5,opt,name=end_soc,json=endSoc,proto3,oneof" json:"end_soc,omitempty"`
	Lng       float64                `protobuf:"fixed64,6,opt,name=lng,proto3" json:"lng,omitempty"`
	Lat       float64                `protobuf:"fixed64,7,opt,name=lat,proto3" json:"lat,omitempty"`
	Address   string                 `protobuf:"bytes,8,opt,name=address,proto3" json:"address,omitempty"`
	InCabinet bool                   `protobuf:"varint,9,opt,name=in_cabinet,json=inCabinet,proto3" json:"in_cabinet,omitempty"`
}

func (x *BatteryStationary) Reset() {
	*x = BatteryStationary{}
	mi := &file_battery_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatteryStationary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryStationary) ProtoMessage() {}

func (x *BatteryStationary) ProtoReflect() protoreflect.Message {
	mi := &file_battery_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryStationary.ProtoReflect.Descriptor instead.
func (*BatteryStationary) Descriptor() ([]byte, []int) {
	return file_battery_proto_rawDescGZIP(), []int{15}
}

func (x *BatteryStationary) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *BatteryStationary) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *BatteryStationary) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *BatteryStationary) GetStartSoc() uint32 {
	if x != nil {
		return x.StartSoc
	}
	return 0
}

func (x *BatteryStationary) GetEndSoc() uint32 {
	if x != nil && x.EndSoc != nil {
		return *x.EndSoc
	}
	return 0
}

func (x *BatteryStationary) GetLng() float64 {
	if x != nil {
		return x.Lng
	}
	return 0
}

func (x *BatteryStationary) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *BatteryStationary) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BatteryStationary) GetInCabinet() bool {
	if x != nil {
		return x.InCabinet
	}
	return false
}

type BatteryPositionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	Stationary []*BatteryStationary   `protobuf:"bytes,3,rep,name=stationary,proto3" json:"stationary,omitempty"`
	Positions  []*BatteryPosition     `protobuf:"bytes,4,rep,name=positions,proto3" json:"positions,omitempty"`
}

func (x *BatteryPositionResponse) Reset() {
	*x = BatteryPositionResponse{}
	mi := &file_battery_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatteryPositionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryPositionResponse) ProtoMessage() {}

func (x *BatteryPositionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_battery_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryPositionResponse.ProtoReflect.Descriptor instead.
func (*BatteryPositionResponse) Descriptor() ([]byte, []int) {
	return file_battery_proto_rawDescGZIP(), []int{16}
}

func (x *BatteryPositionResponse) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *BatteryPositionResponse) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *BatteryPositionResponse) GetStationary() []*BatteryStationary {
	if x != nil {
		return x.Stationary
	}
	return nil
}

func (x *BatteryPositionResponse) GetPositions() []*BatteryPosition {
	if x != nil {
		return x.Positions
	}
	return nil
}

type BatteryListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderBy BatteryListRequest_OrderBy   `protobuf:"varint,1,opt,name=order_by,json=orderBy,proto3,enum=pb.BatteryListRequest_OrderBy" json:"order_by,omitempty"`
	Order   BatteryListRequest_OrderType `protobuf:"varint,2,opt,name=order,proto3,enum=pb.BatteryListRequest_OrderType" json:"order,omitempty"`
}

func (x *BatteryListRequest) Reset() {
	*x = BatteryListRequest{}
	mi := &file_battery_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatteryListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryListRequest) ProtoMessage() {}

func (x *BatteryListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_battery_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryListRequest.ProtoReflect.Descriptor instead.
func (*BatteryListRequest) Descriptor() ([]byte, []int) {
	return file_battery_proto_rawDescGZIP(), []int{17}
}

func (x *BatteryListRequest) GetOrderBy() BatteryListRequest_OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return BatteryListRequest_cycles
}

func (x *BatteryListRequest) GetOrder() BatteryListRequest_OrderType {
	if x != nil {
		return x.Order
	}
	return BatteryListRequest_asc
}

type BatteryListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*BatteryItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *BatteryListResponse) Reset() {
	*x = BatteryListResponse{}
	mi := &file_battery_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatteryListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryListResponse) ProtoMessage() {}

func (x *BatteryListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_battery_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryListResponse.ProtoReflect.Descriptor instead.
func (*BatteryListResponse) Descriptor() ([]byte, []int) {
	return file_battery_proto_rawDescGZIP(), []int{18}
}

func (x *BatteryListResponse) GetItems() []*BatteryItem {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_battery_proto protoreflect.FileDescriptor

var file_battery_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x70, 0x62, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x70, 0x62, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x43, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x43, 0x79, 0x63,
	0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22, 0xaa, 0x04, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x6f, 0x66, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x6f, 0x66,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x68, 0x61, 0x72, 0x64,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x68, 0x61,
	0x72, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0f, 0x73, 0x6f, 0x66,
	0x74, 0x5f, 0x34, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x73, 0x6f, 0x66, 0x74, 0x34, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x44, 0x0a, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x34, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x68, 0x61, 0x72, 0x64, 0x34, 0x67, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x6e, 0x5f, 0x34, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x73, 0x6e, 0x34, 0x67, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x63, 0x63, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x63, 0x63, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x03,
	0x73, 0x6f, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x73, 0x6f, 0x63, 0x12, 0x17, 0x0a, 0x04,
	0x69, 0x6d, 0x65, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6d,
	0x65, 0x69, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x42,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52,
	0x0a, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x69, 0x6d, 0x65, 0x69, 0x22, 0xa7, 0x08, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6f, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x73, 0x6f, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6f, 0x68, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x73, 0x6f, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x5f, 0x63, 0x61,
	0x62, 0x69, 0x6e, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x43,
	0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x6f, 0x6e,
	0x4d, 0x61, 0x78, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x6f,
	0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x56,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x6f, 0x6e,
	0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x6d, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x69, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d,
	0x69, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x6f, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x6d, 0x6f, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x6f, 0x6e, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x65,
	0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x6f, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x76, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x65, 0x6e, 0x76, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x65, 0x6f, 0x6d,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x67, 0x65, 0x6f, 0x6d, 0x12, 0x10, 0x0a, 0x03,
	0x67, 0x70, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x67, 0x70, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x5f, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x5f,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x22, 0x22,
	0x0a, 0x10, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x73, 0x6e, 0x22, 0x60, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x42,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x62, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x49, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x71, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x6f, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73,
	0x6f, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x65, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x67, 0x65, 0x6f, 0x6d, 0x22, 0x58, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2a,
	0x0a, 0x05, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x22, 0x4e, 0x0a, 0x1c, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0xc8, 0x03, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x02, 0x73, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x08, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x70, 0x62, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x07, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52,
	0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x05, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x04,
	0x52, 0x05, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6e,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x06, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x88, 0x01, 0x01,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x73, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x5f, 0x61, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x22, 0xac, 0x01, 0x0a, 0x0c,
	0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x2a, 0x0a, 0x05,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x62,
	0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x65,
	0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x22, 0x7a, 0x0a, 0x18, 0x42, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x19, 0x42, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x6f, 0x75,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x75,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x01, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x61, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x01, 0x52, 0x07, 0x62,
	0x61, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x73, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x01, 0x52, 0x07, 0x6d, 0x6f, 0x73, 0x54, 0x65, 0x6d,
	0x70, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x76, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x6f, 0x63, 0x18, 0x06, 0x20, 0x03, 0x28, 0x01, 0x52, 0x03, 0x73, 0x6f, 0x63, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x03, 0x28, 0x01,
	0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x03, 0x28, 0x01, 0x52, 0x08, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x22, 0xb1, 0x01, 0x0a, 0x16, 0x42, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x73, 0x6e, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x70,
	0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x70, 0x62, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x13,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xda, 0x01,
	0x0a, 0x0f, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x6f, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x73,
	0x6f, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x6c, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x67, 0x73, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x67,
	0x73, 0x6d, 0x12, 0x26, 0x0a, 0x02, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x61, 0x74, 0x22, 0xc5, 0x02, 0x0a, 0x11, 0x42,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12,
	0x32, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x70, 0x62, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x6f, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x63,
	0x12, 0x1c, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x6f, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x01, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x53, 0x6f, 0x63, 0x88, 0x01, 0x01, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6e, 0x67,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c,
	0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x6e, 0x5f, 0x63, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x6e, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x65, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x73,
	0x6f, 0x63, 0x22, 0xdb, 0x01, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x03,
	0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e,
	0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72,
	0x79, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x31, 0x0a,
	0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xe4, 0x01, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x42,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x3b, 0x0a, 0x07, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x0a, 0x0a, 0x06, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x73, 0x6f, 0x63, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x10, 0x03, 0x22, 0x1e, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x61, 0x73, 0x63, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x10, 0x01, 0x22, 0x3c, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x2a, 0xd5, 0x03, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x4c, 0x6f, 0x77, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x48, 0x69, 0x67,
	0x68, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x4d, 0x6f, 0x6e, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x77,
	0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x4d, 0x6f, 0x6e, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x48, 0x69, 0x67, 0x68,
	0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x44, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4f, 0x76,
	0x65, 0x72, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x42,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x6f, 0x63, 0x4c, 0x6f,
	0x77, 0x10, 0x08, 0x12, 0x27, 0x0a, 0x23, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x69, 0x67, 0x68, 0x10, 0x0b, 0x12, 0x26, 0x0a, 0x22,
	0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c,
	0x6f, 0x77, 0x10, 0x0c, 0x12, 0x2a, 0x0a, 0x26, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x44, 0x69, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x69, 0x67, 0x68, 0x10, 0x0d,
	0x12, 0x29, 0x0a, 0x25, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x44, 0x69, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x77, 0x10, 0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x42,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x10, 0x0f, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x6f, 0x73, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x69, 0x67, 0x68, 0x10, 0x10, 0x32, 0xd2, 0x03,
	0x0a, 0x07, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x62,
	0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12,
	0x14, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x09, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e,
	0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e,
	0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x42,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x41, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x14, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70,
	0x62, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x42,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x75, 0x72, 0x6f, 0x72, 0x61, 0x72, 0x69, 0x64, 0x65, 0x2f, 0x61, 0x64, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_battery_proto_rawDescOnce sync.Once
	file_battery_proto_rawDescData = file_battery_proto_rawDesc
)

func file_battery_proto_rawDescGZIP() []byte {
	file_battery_proto_rawDescOnce.Do(func() {
		file_battery_proto_rawDescData = protoimpl.X.CompressGZIP(file_battery_proto_rawDescData)
	})
	return file_battery_proto_rawDescData
}

var file_battery_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_battery_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_battery_proto_goTypes = []any{
	(BatteryFaultType)(0),                // 0: pb.BatteryFaultType
	(BatteryListRequest_OrderBy)(0),      // 1: pb.BatteryListRequest.OrderBy
	(BatteryListRequest_OrderType)(0),    // 2: pb.BatteryListRequest.OrderType
	(*BatteryCycles)(nil),                // 3: pb.BatteryCycles
	(*BatteryItem)(nil),                  // 4: pb.BatteryItem
	(*BatteryHeartbeat)(nil),             // 5: pb.BatteryHeartbeat
	(*BatterySnRequest)(nil),             // 6: pb.BatterySnRequest
	(*BatteryBatchRequest)(nil),          // 7: pb.BatteryBatchRequest
	(*BatteryBatchResponse)(nil),         // 8: pb.BatteryBatchResponse
	(*BatterySampleResponse)(nil),        // 9: pb.BatterySampleResponse
	(*BatteryFaultOverview)(nil),         // 10: pb.BatteryFaultOverview
	(*BatteryFaultOverviewResponse)(nil), // 11: pb.BatteryFaultOverviewResponse
	(*BatteryFaultListRequest)(nil),      // 12: pb.BatteryFaultListRequest
	(*BatteryFault)(nil),                 // 13: pb.BatteryFault
	(*BatteryFaultListResponse)(nil),     // 14: pb.BatteryFaultListResponse
	(*BatteryStatisticsResponse)(nil),    // 15: pb.BatteryStatisticsResponse
	(*BatteryPositionRequest)(nil),       // 16: pb.BatteryPositionRequest
	(*BatteryPosition)(nil),              // 17: pb.BatteryPosition
	(*BatteryStationary)(nil),            // 18: pb.BatteryStationary
	(*BatteryPositionResponse)(nil),      // 19: pb.BatteryPositionResponse
	(*BatteryListRequest)(nil),           // 20: pb.BatteryListRequest
	(*BatteryListResponse)(nil),          // 21: pb.BatteryListResponse
	nil,                                  // 22: pb.BatteryBatchResponse.ItemsEntry
	(*wrapperspb.UInt32Value)(nil),       // 23: google.protobuf.UInt32Value
	(*wrapperspb.UInt64Value)(nil),       // 24: google.protobuf.UInt64Value
	(*wrapperspb.StringValue)(nil),       // 25: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),        // 26: timestamppb.Timestamp
	(*PaginationRequest)(nil),            // 27: pb.PaginationRequest
	(*PaginationResponse)(nil),           // 28: pb.PaginationResponse
}
var file_battery_proto_depIdxs = []int32{
	23, // 0: pb.BatteryItem.soft_version:type_name -> google.protobuf.UInt32Value
	23, // 1: pb.BatteryItem.hard_version:type_name -> google.protobuf.UInt32Value
	23, // 2: pb.BatteryItem.soft_4g_version:type_name -> google.protobuf.UInt32Value
	23, // 3: pb.BatteryItem.hard_4g_version:type_name -> google.protobuf.UInt32Value
	24, // 4: pb.BatteryItem.sn_4g:type_name -> google.protobuf.UInt64Value
	25, // 5: pb.BatteryItem.iccid:type_name -> google.protobuf.StringValue
	23, // 6: pb.BatteryItem.soc:type_name -> google.protobuf.UInt32Value
	5,  // 7: pb.BatteryItem.heartbeats:type_name -> pb.BatteryHeartbeat
	26, // 8: pb.BatteryHeartbeat.created_at:type_name -> timestamppb.Timestamp
	4,  // 9: pb.BatteryHeartbeat.battery:type_name -> pb.BatteryItem
	3,  // 10: pb.BatteryBatchRequest.cycles:type_name -> pb.BatteryCycles
	22, // 11: pb.BatteryBatchResponse.items:type_name -> pb.BatteryBatchResponse.ItemsEntry
	0,  // 12: pb.BatteryFaultOverview.fault:type_name -> pb.BatteryFaultType
	10, // 13: pb.BatteryFaultOverviewResponse.items:type_name -> pb.BatteryFaultOverview
	27, // 14: pb.BatteryFaultListRequest.pagination:type_name -> pb.PaginationRequest
	26, // 15: pb.BatteryFaultListRequest.begin_at:type_name -> timestamppb.Timestamp
	26, // 16: pb.BatteryFaultListRequest.end_at:type_name -> timestamppb.Timestamp
	0,  // 17: pb.BatteryFaultListRequest.fault:type_name -> pb.BatteryFaultType
	26, // 18: pb.BatteryFaultListRequest.start:type_name -> timestamppb.Timestamp
	26, // 19: pb.BatteryFaultListRequest.stop:type_name -> timestamppb.Timestamp
	0,  // 20: pb.BatteryFault.fault:type_name -> pb.BatteryFaultType
	26, // 21: pb.BatteryFault.begin_at:type_name -> timestamppb.Timestamp
	26, // 22: pb.BatteryFault.end_at:type_name -> timestamppb.Timestamp
	28, // 23: pb.BatteryFaultListResponse.pagination:type_name -> pb.PaginationResponse
	13, // 24: pb.BatteryFaultListResponse.items:type_name -> pb.BatteryFault
	26, // 25: pb.BatteryPositionRequest.start:type_name -> timestamppb.Timestamp
	26, // 26: pb.BatteryPositionRequest.end:type_name -> timestamppb.Timestamp
	26, // 27: pb.BatteryPosition.at:type_name -> timestamppb.Timestamp
	26, // 28: pb.BatteryStationary.start_at:type_name -> timestamppb.Timestamp
	26, // 29: pb.BatteryStationary.end_at:type_name -> timestamppb.Timestamp
	26, // 30: pb.BatteryPositionResponse.start:type_name -> timestamppb.Timestamp
	26, // 31: pb.BatteryPositionResponse.end:type_name -> timestamppb.Timestamp
	18, // 32: pb.BatteryPositionResponse.stationary:type_name -> pb.BatteryStationary
	17, // 33: pb.BatteryPositionResponse.positions:type_name -> pb.BatteryPosition
	1,  // 34: pb.BatteryListRequest.order_by:type_name -> pb.BatteryListRequest.OrderBy
	2,  // 35: pb.BatteryListRequest.order:type_name -> pb.BatteryListRequest.OrderType
	4,  // 36: pb.BatteryListResponse.items:type_name -> pb.BatteryItem
	4,  // 37: pb.BatteryBatchResponse.ItemsEntry.value:type_name -> pb.BatteryItem
	7,  // 38: pb.Battery.Batch:input_type -> pb.BatteryBatchRequest
	6,  // 39: pb.Battery.Sample:input_type -> pb.BatterySnRequest
	12, // 40: pb.Battery.FaultList:input_type -> pb.BatteryFaultListRequest
	6,  // 41: pb.Battery.FaultOverview:input_type -> pb.BatterySnRequest
	6,  // 42: pb.Battery.Statistics:input_type -> pb.BatterySnRequest
	16, // 43: pb.Battery.Position:input_type -> pb.BatteryPositionRequest
	20, // 44: pb.Battery.List:input_type -> pb.BatteryListRequest
	8,  // 45: pb.Battery.Batch:output_type -> pb.BatteryBatchResponse
	9,  // 46: pb.Battery.Sample:output_type -> pb.BatterySampleResponse
	14, // 47: pb.Battery.FaultList:output_type -> pb.BatteryFaultListResponse
	11, // 48: pb.Battery.FaultOverview:output_type -> pb.BatteryFaultOverviewResponse
	15, // 49: pb.Battery.Statistics:output_type -> pb.BatteryStatisticsResponse
	19, // 50: pb.Battery.Position:output_type -> pb.BatteryPositionResponse
	21, // 51: pb.Battery.List:output_type -> pb.BatteryListResponse
	45, // [45:52] is the sub-list for method output_type
	38, // [38:45] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_battery_proto_init() }
func file_battery_proto_init() {
	if File_battery_proto != nil {
		return
	}
	file_pagination_proto_init()
	file_battery_proto_msgTypes[1].OneofWrappers = []any{}
	file_battery_proto_msgTypes[4].OneofWrappers = []any{}
	file_battery_proto_msgTypes[9].OneofWrappers = []any{}
	file_battery_proto_msgTypes[15].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_battery_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_battery_proto_goTypes,
		DependencyIndexes: file_battery_proto_depIdxs,
		EnumInfos:         file_battery_proto_enumTypes,
		MessageInfos:      file_battery_proto_msgTypes,
	}.Build()
	File_battery_proto = out.File
	file_battery_proto_rawDesc = nil
	file_battery_proto_goTypes = nil
	file_battery_proto_depIdxs = nil
}
