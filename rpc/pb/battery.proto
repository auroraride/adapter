syntax = "proto3";

package pb;

import "google/protobuf/wrappers.proto";
import "pagination.proto";
import "timestamppb/timestamp.proto";

option go_package = "github.com/auroraride/adapter/rpc/pb";

service Battery {
  rpc Batch(BatteryBatchRequest) returns (BatteryBatchResponse);
  rpc Sample(BatterySnRequest) returns (BatterySampleResponse);
  rpc FaultList(BatteryFaultListRequest) returns (BatteryFaultListResponse);
  rpc FaultOverview(BatterySnRequest) returns (BatteryFaultOverviewResponse);
  rpc Statistics(BatterySnRequest) returns (BatteryStatisticsResponse);
  rpc Position(BatteryPositionRequest) returns (BatteryPositionResponse);
  rpc List(BatteryListRequest) returns (BatteryListResponse);
  rpc Overlapping(OverlappingRequest) returns (OverlappingResponse);
}

message BatteryCycles {
  int64 minimum = 1; // 最小值
  int64 maximum = 2; // 最大值
}

message BatteryItem {
  int64 id = 1;
  string sn = 2;
  google.protobuf.UInt32Value soft_version = 3;
  google.protobuf.UInt32Value hard_version = 4;
  google.protobuf.UInt32Value soft_4g_version = 5;
  google.protobuf.UInt32Value hard_4g_version = 6;
  google.protobuf.UInt64Value sn_4g = 7;
  google.protobuf.StringValue iccid = 8;
  google.protobuf.UInt32Value soc = 9;
  optional string imei = 10;
  repeated BatteryHeartbeat heartbeats = 11;
}

message BatteryHeartbeat {
  uint64 id = 1;
  string sn = 2;
  int64 battery_id = 3;
  timestamppb.Timestamp created_at = 4;
  double voltage = 5;
  double current = 6;
  uint32 soc = 7;
  uint32 soh = 8;
  bool in_cabinet = 9;
  double capacity = 10;
  uint32 mon_max_voltage = 11;
  uint32 mon_max_voltage_pos = 12;
  uint32 mon_min_voltage = 13;
  uint32 mon_min_voltage_pos = 14;
  uint32 max_temp = 15;
  uint32 min_temp = 16;
  bytes faults = 17;
  bytes mos_status = 18;
  bytes mon_voltage = 19;
  bytes temp = 20;
  uint32 mos_temp = 21;
  uint32 env_temp = 22;
  bytes geom = 23;
  uint32 gps = 24;
  uint32 strength = 25;
  uint32 cycles = 26;
  uint64 charging_time = 27;
  uint64 dis_charging_time = 28;
  uint64 using_time = 29;
  uint64 total_charging_time = 30;
  uint64 total_dis_charging_time = 31;
  uint64 total_using_time = 32;
  BatteryItem battery = 33;
}

message BatterySnRequest {
  string sn = 1;
}

message BatteryBatchRequest {
  repeated string sn = 1; // 电池编号筛选
  optional BatteryCycles cycles = 2; // 电池循环次数筛选
}

message BatteryBatchResponse {
  map<string, BatteryItem> items = 1;
}

message BatterySampleResponse {
  double voltage = 1;
  double current = 2;
  uint32 soc = 3;
  bytes geom = 4;
}

enum BatteryFaultType {
  BatteryFaultVoltageLow = 0; // 总压低
  BatteryFaultVoltageHigh = 1; // 总压高
  BatteryFaultMonVoltageLow = 2; // 单体低
  BatteryFaultMonVoltageHigh = 3; // 单体高
  BatteryFaultDischargeOvercurrent = 6; // 放电过流
  BatteryFaultChargeOvercurrent = 7; // 充电过流
  BatteryFaultSocLow = 8; // SOC低
  BatteryFaultChargingTemperatureHigh = 11; // 充电高温
  BatteryFaultChargingTemperatureLow = 12; // 充电低温
  BatteryFaultDisChargingTemperatureHigh = 13; // 放电高温
  BatteryFaultDisChargingTemperatureLow = 14; // 放电低温
  BatteryFaultShortCircuit = 15; // 短路
  BatteryFaultMosTemperatureHigh = 16; // MOS高温
}

message BatteryFaultOverview {
  BatteryFaultType fault = 1;
  int64 times = 2;
}

message BatteryFaultOverviewResponse {
  repeated BatteryFaultOverview items = 1;
}

message BatteryFaultListRequest {
  optional PaginationRequest pagination = 1;
  optional string sn = 2;
  optional timestamppb.Timestamp begin_at = 3;
  optional timestamppb.Timestamp end_at = 4;
  optional BatteryFaultType fault = 5;
  repeated string sns = 6;
  optional timestamppb.Timestamp start = 7;
  optional timestamppb.Timestamp stop = 8;
}

message BatteryFault {
  string sn = 1;
  BatteryFaultType fault = 2;
  timestamppb.Timestamp begin_at = 3;
  timestamppb.Timestamp end_at = 4;
}

message BatteryFaultListResponse {
  PaginationResponse pagination = 1;
  repeated BatteryFault items = 2;
}

message BatteryStatisticsResponse {
  repeated string date_hour = 1;
  repeated double voltage = 2;
  repeated double bat_temp = 3;
  repeated double mos_temp = 4;
  repeated double env_temp = 5;
  repeated double soc = 6;
  repeated double strength = 7;
  repeated double charging = 8;
  repeated double dis_charging = 9;
}

message BatteryPositionRequest {
  string sn = 1;
  timestamppb.Timestamp start = 2;
  timestamppb.Timestamp end = 3;
  int64 stationary_duration = 4;
}

message BatteryPosition {
  bool in_cabinet = 1;
  bool stationary = 2;
  uint32 soc = 3;
  double lng = 4;
  double lat = 5;
  double voltage = 6;
  uint32 gsm = 7;
  timestamppb.Timestamp at = 8;
}

message BatteryStationary {
  int64 duration = 1;
  timestamppb.Timestamp start_at = 2;
  optional timestamppb.Timestamp end_at = 3;
  uint32 start_soc = 4;
  optional uint32 end_soc = 5;
  double lng = 6;
  double lat = 7;
  string address = 8;
  bool in_cabinet = 9;
}

message BatteryPositionResponse {
  timestamppb.Timestamp start = 1;
  timestamppb.Timestamp end = 2;
  repeated BatteryStationary stationary = 3;
  repeated BatteryPosition positions = 4;
}

message BatteryListRequest {
  enum OrderBy {
    cycles = 0;
    soc = 1;
    voltage = 2;
    created_at = 3;
  }
  enum OrderType {
    asc = 0;
    desc = 1;
  }
  OrderBy order_by = 1;
  OrderType order = 2;
}

message BatteryListResponse {
  repeated BatteryItem items = 1;
}

message OverlappingRequest {
  string sn = 1; // 电池编码
  timestamppb.Timestamp start = 2; // 起始时间
  timestamppb.Timestamp end = 3; // 结束时间
  uint64 tolerance = 4; // 时间窗口大小（秒）
  double distance = 5; // 距离阈值（米）
}

message OverlappingItem {
  string candidateSn = 1; // 候选电池编码
  string candidateTs = 2; // 候选电池出现时间
  double candidateLatitude = 3; // 候选电池纬度
  double candidateLongitude = 4; // 候选电池经度
  double distance = 5; // 候选电池与目标电池的距离
  string ts = 6; // 目标电池出现时间
  double latitude = 7; // 目标电池纬度
  double longitude = 8; // 目标电池经度
}

message OverlappingResponse {
  repeated OverlappingItem items = 1;
}
