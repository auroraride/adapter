// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: business.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Business_Exchange_FullMethodName = "/pb.Business/Exchange"
)

// BusinessClient is the client API for Business service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusinessClient interface {
	// 电柜换电
	Exchange(ctx context.Context, in *BusinessExchangeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BusinessExchangeResponse], error)
}

type businessClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessClient(cc grpc.ClientConnInterface) BusinessClient {
	return &businessClient{cc}
}

func (c *businessClient) Exchange(ctx context.Context, in *BusinessExchangeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BusinessExchangeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Business_ServiceDesc.Streams[0], Business_Exchange_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BusinessExchangeRequest, BusinessExchangeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Business_ExchangeClient = grpc.ServerStreamingClient[BusinessExchangeResponse]

// BusinessServer is the server API for Business service.
// All implementations must embed UnimplementedBusinessServer
// for forward compatibility.
type BusinessServer interface {
	// 电柜换电
	Exchange(*BusinessExchangeRequest, grpc.ServerStreamingServer[BusinessExchangeResponse]) error
	mustEmbedUnimplementedBusinessServer()
}

// UnimplementedBusinessServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBusinessServer struct{}

func (UnimplementedBusinessServer) Exchange(*BusinessExchangeRequest, grpc.ServerStreamingServer[BusinessExchangeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Exchange not implemented")
}
func (UnimplementedBusinessServer) mustEmbedUnimplementedBusinessServer() {}
func (UnimplementedBusinessServer) testEmbeddedByValue()                  {}

// UnsafeBusinessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusinessServer will
// result in compilation errors.
type UnsafeBusinessServer interface {
	mustEmbedUnimplementedBusinessServer()
}

func RegisterBusinessServer(s grpc.ServiceRegistrar, srv BusinessServer) {
	// If the following call pancis, it indicates UnimplementedBusinessServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Business_ServiceDesc, srv)
}

func _Business_Exchange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BusinessExchangeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BusinessServer).Exchange(m, &grpc.GenericServerStream[BusinessExchangeRequest, BusinessExchangeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Business_ExchangeServer = grpc.ServerStreamingServer[BusinessExchangeResponse]

// Business_ServiceDesc is the grpc.ServiceDesc for Business service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Business_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Business",
	HandlerType: (*BusinessServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Exchange",
			Handler:       _Business_Exchange_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "business.proto",
}
